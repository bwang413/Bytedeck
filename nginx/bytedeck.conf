# /etc/nginx/sites-enabled/bytedeck.conf

# the upstream uwsgi component nginx needs to connect to
upstream django {
    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
    server 127.0.0.1:8000; # for a web port socket (we'll use this first)
}


server {

    listen 443 ssl http2; # managed by Certbot
    listen [::]:443 ssl http2;

    server_name bytedeck.com *.bytedeck.com;

    ## Deny illegal Host headers
    if ($host !~* ^(bytedeck.com|.+\.bytedeck.com)$ ) {
        return 444;
    }

    client_max_body_size 17M;

    location /media  {
        alias /var/www/bytedeck/media;

        # Limiting Bandwidth for Particular URLs
        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Limiting-Bandwidth-for-Particular-URLs
        # This will be bad for loading portfolios, is it needed?
        #limit_rate_after 500k;
        #limit_rate 50k;

        # Setting-Cache-Headers
        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Setting-Cache-Headers
        location ~* \.(?:jpg|jpeg|gif|png|ico|woff2)$ {
            expires 1M;
            add_header Cache-Control "public";
            access_log off;
        }

    }


    location /static {
        alias /var/www/bytedeck/static;

        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Setting-Cache-Headers
        location ~* \.(?:jpg|jpeg|gif|png|ico|woff2)$ {
            expires 1M;
            add_header Cache-Control "public";
            access_log off;
        }

        # https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Optimizing-Logging
        location ~* \.(?:js|css)$ {
            access_log off;
        }

    }


    location / {
        uwsgi_pass django;
        include uwsgi_params;
    }

    ssl_certificate /etc/letsencrypt/live/bytedeck.com-0002/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/bytedeck.com-0002/privkey.pem;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # intermediate configuration

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA$
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/letsencrypt/live/bytedeck.com-0002/chain.pem;

    # GZIP SETTINGS: https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/#Enabling-Gzip-Compression-for-HTML-CSS-and-JavaScript-Files
    gzip on;
    gzip_types application/xml application/json text/plain text/css text/xml text/javascript application/javascript application/x-javascript;
    gzip_vary on; # tells proxies to cache both gzipped and regular versions of a resource
    gzip_comp_level 6;
    gzip_min_length 500; # don't compress anything smaller than



}

server {
    # redirect all http requests to port 443 (https)
    listen 80;
    listen [::]:80;
    server_name bytedeck.com *.bytedeck.com;
    return 301 https://$host$request_uri;
}

server {
    # drop connections that aren't directly to a server_name defined in one of the above blocks
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 444;
}






